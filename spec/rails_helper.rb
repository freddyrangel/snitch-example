# This file is copied to spec/ when you run 'rails generate rspec:install'
ENV["RAILS_ENV"] ||= 'test'
require 'spec_helper'
require File.expand_path("../../config/environment", __FILE__)
require 'rspec/rails'
require 'thor/shell'

Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }
include ActionView::Helpers::TextHelper

ActiveRecord::Migration.maintain_test_schema!

RSpec.configure do |config|
  config.use_transactional_fixtures = true
  config.infer_spec_type_from_file_location!
  config.run_all_when_everything_filtered = true

  config.after(:suite) do
    # Get GitHub issues
    repo = 'freddyrangel/snitch-example'
    github = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])
    issues = github.list_issues(repo, state: 'open')
    issue_titles = issues.map(&:title)

    # Get pending examples
    examples = config.instance_variable_get(:@reporter)
    pendings = examples.pending_examples

    # Filter examples that do not have a corresponding GH issue
    thor = Thor::Shell::Basic.new

    reportable_examples = []
    pendings.each do |example|
      if example.pending? && issue_titles.exclude?(example.full_description)
        reportable_examples << example
      end
    end

    # Ask user for confirmation
    question = "#{pluralize(reportable_examples.size, 'issue')} to report. Snitch to GitHub? (y/n):"

    if reportable_examples.any? && thor.yes?(question)
      reportable_examples.each do |example|
        title = example.full_description
        body = "#{example.location}\n\nThis issue was generated by rspec-snitch."

        # Create GitHub issue!
        github.create_issue(repo, title, body)

        # TODO: Reopen if exists, but is closed.
      end

      puts "#{pluralize(reportable_examples.size, 'issue')} created for #{repo}."
    end
  end
end
